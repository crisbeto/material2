@use 'sass:color';
@use 'sass:map';
@use '../mdc-helpers/mdc-helpers';
@use '../../material/core/theming/theming';
@import '@material/chips/mixins.import';

@import '@material/theme/functions.import';

@mixin color($config-or-theme) {
  $config: theming.get-color-config($config-or-theme);
  $primary: theming.color(map.get($config, primary));
  $accent: theming.color(map.get($config, accent));
  $warn: theming.color(map.get($config, warn));
  $background: map.get($config, background);
  $unselected-background: theming.color($background, unselected-chip);

  // Save original values of MDC global variables. We need to save these so we can restore the
  // variables to their original values and prevent unintended side effects from using this mixin.
  $orig-mdc-chips-fill-color-default: $mdc-chips-fill-color-default;
  $orig-mdc-chips-ink-color-default: $mdc-chips-ink-color-default;
  $orig-mdc-chips-icon-color: $mdc-chips-icon-color;

  @include mdc-helpers.mat-using-mdc-theme($config) {
    $mdc-chips-fill-color-default:
        color.mix(mdc-theme-prop-value(on-surface), mdc-theme-prop-value(surface), 12%) !global;
    $mdc-chips-ink-color-default: rgba(mdc-theme-prop-value(on-surface), 0.87) !global;
    $mdc-chips-icon-color: mdc-theme-prop-value(on-surface) !global;

    @include mdc-chip-set-core-styles($query: mdc-helpers.$mat-theme-styles-query);
    @include mdc-chip-without-ripple($query: mdc-helpers.$mat-theme-styles-query);

    .mat-mdc-chip {
      @include mdc-chip-fill-color-accessible($unselected-background,
        $query: mdc-helpers.$mat-theme-styles-query);

      &.mat-primary {
        &.mdc-chip--selected, &.mat-mdc-chip-highlighted {
          @include mdc-chip-fill-color-accessible($primary, $query: mdc-helpers.$mat-theme-styles-query);
        }
      }

      &.mat-accent {
        &.mdc-chip--selected, &.mat-mdc-chip-highlighted {
          @include mdc-chip-fill-color-accessible($accent, $query: mdc-helpers.$mat-theme-styles-query);
        }
      }

      &.mat-warn {
        &.mdc-chip--selected, &.mat-mdc-chip-highlighted {
          @include mdc-chip-fill-color-accessible($warn, $query: mdc-helpers.$mat-theme-styles-query);
        }
      }
    }
  }

  // Restore original values of MDC global variables.
  $mdc-chips-fill-color-default: $orig-mdc-chips-fill-color-default !global;
  $mdc-chips-ink-color-default: $orig-mdc-chips-ink-color-default !global;
  $mdc-chips-icon-color: $orig-mdc-chips-icon-color !global;
}

@mixin typography($config-or-theme) {
  $config: theming.get-typography-config($config-or-theme);
  @include mdc-chip-set-core-styles($query: mdc-helpers.$mat-typography-styles-query);
  @include mdc-helpers.mat-using-mdc-typography($config) {
    @include mdc-chip-without-ripple($query: mdc-helpers.$mat-typography-styles-query);
  }
}

@mixin density($config-or-theme) {
  $density-scale: theming.get-density-config($config-or-theme);
  .mat-mdc-chip {
    @include mdc-chip-density($density-scale, $query: mdc-helpers.$mat-base-styles-query);
  }
}

@mixin theme($theme-or-color-config) {
  $theme: theming.legacy-get-theme($theme-or-color-config);
  @include theming.check-duplicate-theme-styles($theme, 'mat-mdc-chips') {
    $color: theming.get-color-config($theme);
    $density: theming.get-density-config($theme);
    $typography: theming.get-typography-config($theme);

    @if $color != null {
      @include color($color);
    }
    @if $density != null {
      @include density($density);
    }
    @if $typography != null {
      @include typography($typography);
    }
  }
}

